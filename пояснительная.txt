Пояснительная записка 
Проект "Magic Dungeon"
Мещанов Михаил, Суворова Дарья
Для начала работы программы запустить файл main.py

При запуске игры открывается меню с 4 кнопками: Play (начать новую игру), 
Load (загрузить одну из сохранённых игр), Settings (настройки музыки и звуков игры), Exit (выйти)
При запуске игры (новой или загруженной) открывается клетчатое поле(одна из комнат), на котором 
находятся: игрок, 2-5 врага, сундуки, где можно найти ключи для следующих комнат, доп жизни и тд. 
Нужно дойти до прохода в следующую комнату. У игрока несколько жизней, каждые его несколько ходов делают 
ходы враги. Чтобы пройти игру, нужно пройти через несколько комнат, тогда появится сообщение о победе и игра 
завершится. Местонахождение врагов и предметов генерируется случайно (только при новой игре, данные о сохранённых 
комнатах хранятся в базе данных). Также в верхней части экрана - количество оставшихся жизней, сила, собранные предметы.
Если нажать левой кнопкой на врага, в нижней части экрана появятся его характеристики.


Файлы:
1. main.py
Инициализация pygame, словарь windows со всеми окнами в игре вида 'название окна' : объект окна, который должен быть на экране.
current_window - текущее окно
Цикл игры, передает все события текущему окну

2.interface.py
	Class Window:
	__init__() - класс окна, нужно указать имя и объекты, которые в этом окне
	находятся (все объекты должны реализовывать интерфейс Element)
	music_name - имя музыки, которая будет проигрываться в этом окне.
	fade() - затемнение окна
	update() - обновление окна и их отрисовка, вызов handle_events(events)
	handle_events() - обработка событий, окно передает события своим объектам
	
	Class Element - абстрактный класс элемента в окне
    def __init__()
    def button_down(mouse_pos) -функция нажатия мыши
    def button_up(mouse_pos) - функция отпускания мыши
    def mouse_motion(mouse_pos) - функция движения мыши
    def key_down(button) - функция нажатия на клавиатуру
    def show(surf) Отображение на поверхность
	
	Class AnimatedElement(Element) - класс анимированного элемента в окне
	В отличие от просто элемента имеет аниматор
	
	Последущие классы наследуются от Element или AnimatedElement и переопределяют некоторые их методы, только
	у класса Button добавляется новый метод action: в нем прописывается то, что должно происходить, при нажатии
	на кнопку мышью или при выборе кнопки с помощью хоткея
	
	class Button(AnimatedElement) - класс кнопки
	class Image(AnimatedElement) - класс изображения
	class AntiButton(Button) - класс анти-кнопки (анпример панель настроек)
	class Slider(AnimatedElement) - класс слайдера
	class Text(Element) - класс текста, отрисовываемого с помощью pygame
	class Panel(Element) - класс панели в игре
	class InventorySlot(Element) - класс слота в инвентаре
	class Inventory(Element) - класс инвентаря
	class InputBox(AnimatedElement) - класс поля, в которе можно ввести текст
	class Arrow(Button) - класс стрелки
	class SaveButton(Button) - класс кнопки сохранения
	class LoadButton(Button) - класс кнопки загрузки

3. animator.py - вся анимация к игре
class Animator:
	__init__() - класс для объекта, изменяющего свою картинку в течении игры,
	нужно указать путь к спрайтам
	start(name) - начать новую анимацию
	next_() - получить следущий кадр и смещение

4. entity.py - все сущности в игре
class Entity:
	__init__()
	show() - отобразить на повержность
	get_direction() - получить направление по изменению координаты ((1, 0) == движение вправо)
	interaction() - взаимодействие с объектом, эту функция определяет с чем мы взаимодействуем и вызывает
	соответствующую функцию
	функции interaction_... функции взаимодействия с конкретным объектом(с сундуком, дверью, клеткой перехода в другую комнату).
	get_hit() - функция получения урона
	die() - функция смерти
	
	class Player(Entity):
	в этом классе переопределены некоторые функции взаимодействия с объектами(например игрок может двигать коробку, а враг - нет, может перейти в следующую комнату, а враг нет)
	
	class Enemy(Entity):
	класс врага, отличие от Entity - переменная color, которая отвечает за цвет врага

5. music.py - музыкальное сопровождение
class Music
    __init__()
        self.sounds - словарь вида {имя звука: pygame.mixer.Sound()}
        self.musics - словарь вида {имя музыки: путь к музыке}
    play_sound() - проиграть звук по имени (смотри словарь)
    play_music() - проиграть музыку по имени (смотри словарь)
    set_music_volume() - настройка громкости музыки
    set_sounds_volume() - настройка громкости звуков

6.  dungeon.py
class Dungeon:
	__init__() - есть словать room вида номер комнаты: объект класса Комната, current_room - номер текущей комнаты
	load() - загрузка уровня
	load_room() - загрузка комнаты
	save() - сохранение уровня в базе
	load() - загрузка из базы
	change_room() - смена комнаты
	generate_level() - создание уровня
	get() - получить то, что находится по координатам
	player_move() - движение игрока
	enemies_move() - движение врагов
	show() - показать лабиринт
	button_down() - отслеживание нажатия мыши
	key_down(button) - отслеживание нажатия клавиши

7. objects.py - все объекты на экране
	class GameObject - это абстрактный класс объекта на игровом поле
	__init__() - путь к папке со спрайтами, позиция, имя объекта
	show() - отобразить на поверхности

	class Wall(GameObject) - стена
	
	class Empty(GameObject) - пустая клетка
	
	class Box(GameObject) - коробка
	move() - сдвинуть коробку в new_position, direction нужно чтобы поставить правильную анимацию
		
	class Chest(GameObject)
	touch() - функция "трогания" сундука:
		1ое касание - появление ключа, 
		2ое касание - исчезновение ключа,
		последущие касания - вернет '__empty__' и Player.interaction_chest запустит простое движение в клетку
	
	class Potion(GameObject) - зелье в сундуках
	
	class Door(GameObject) - двери в переходах между комнатами (открываются при наличии ключа нужного цвета)
	touch() - попытка открыть дверь 
	
	class Key(GameObject)
	__init__() - позиция, цвет ключа

8. config.py
Все глобальные константы (цвета, координаты и тд)

9. functions.py
Функции, которые используются во всем коде 
	apply - сдвигает координты на PANEL_HEIGHT вниз по Y
	load_image - загружает изображение с прозрачным фоном
	convert_coordinates - конкертирует координаты

База dungeonBase.db
таблицы: users, rooms, entities, objects, inventory, types_of_objects
