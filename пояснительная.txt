Пояснительная записка 
Проект "Magic Dungeon"
Мещанов Михаил, Суворова Дарья
Для начала работы программы запустить файл main.py

При запуске игры открывается меню с 4 кнопками: Play (начать новую игру), 
Load (загрузить одну из сохранённых игр), Settings (настройки музыки и звуков игры), Exit (выйти)
При запуске игры (новой или загруженной) открывается клетчатое поле(одна из комнат), на котором 
находятся: игрок, 2-5 врага, сундуки, где можно найти ключи для следующих комнат, доп жизни и тд. 
Нужно дойти до прохода в следующую комнату. У игрока несколько жизней, каждые его несколько ходов делают 
ходы враги. Чтобы пройти игру, нужно пройти через несколько комнат, тогда появится сообщение о победе и игра 
завершится. Местонахождение врагов и предметов генерируется случайно (только при новой игре, данные о сохранённых 
комнатах хранятся в базе данных). Также в верхней части экрана - количество оставшихся жизней, сила, собранные предметы.
Если нажать левой кнопкой на врага, в нижней части экрана появятся его характеристики.


Файлы:
1. main.py
Инициализация pygame, словарь windows со всеми окнами в игре вида 'название окна' : объект окна, который должен быть на экране.
current_window - текущее окно
Цикл игры, передает все события текущему окну

2.interface.py
	Class Window:
	__init__(name, objects, music_name='main', run_music=False) - класс окна, нужно указать имя и объекты, которые в этом окне
	находятся (все объекты должны реализовывать интерфейс Element). music_name - имя музыки, которая будет проигрываться в этом окне.
	run_music - нужно ли запускать музыку при загрузке окна (т.е. когда мы переходим из меню в игру музыка меняется, а когда в главном
	меню открываем настройки, то музыка не меняется)
	update(surf, events) - обновление окна и их отрисовка, вызов get_event(events)
	
	get_event(events) - окно передает все события своим элементам(objects), эта функция должна вернуть название окна, которое будет отрисовано следущим, т.е. если мы никуда не переходим, то функция должна
	возвращать название текущего окна
	

3. animator.py - вся анимация к игре
class Animator:
	__init__(path, options=None) - класс для объекта, изменяющего свою картинку в течении игры, нужно указать путь к спрайтам
	start(name) - начать новую анимацию
	next_() - получить следущий кадр и смещение

4. entity.py - все сущности в игре
class Entity:
	__init__()
	show(surf) - отобразить на повержность
	get_direction(obj) - получить направление по изменению координаты ((1, 0) == движение вправо)
	interaction(dungeon_, movement) - взаимодействие с объектом, эту функция определяет с чем мы взаимодействуем и вызывает
	соответствующую функцию
	функции interaction_... функции взаимодействия с конкретным объектом(с сундуком, дверью, клеткой перехода в другую комнату). В случае успешного взаимодействия функция должна
	вернуть True, в случае неудачного взаимодействия можно ничего не возвращать
	get_hit(damage) - функция получения урона
	die() - функция смерти
	
	class Player(Entity):
	в этом классе переопределены некоторые функции взаимодействия с объектами(например игрок может двигать коробку, а враг - нет, может перейти в следующую комнату, а враг нет)
	
	class Enemy(Entity):
	класс врага, отличие от Entity - переменная color, которая отвечает за цвет врага

5. music.py - музыкальное сопровождение
class Music
    __init__()
        self.sounds - словарь вида {имя звука: pygame.mixer.Sound()}
        self.musics - словарь вида {имя музыки: путь к музыке}
    play_sound(name) - проиграть звук по имени (смотри словарь)
    play_music(name) - проиграть музыку по имени (смотри словарь)
    set_music_volume(volume) - настройка громкости музыки
    set_sounds_volume(volume) - настройка громкости звуков

6.  dungeon.py
class Dungeon:
	__init__() - есть словать room вида номер комнаты: объект класса Комната, current_room - номер текущей комнаты
	
	load() - загрузка уровня
	load_room() - загрузка комнаты
	save() - сохранение уровня в базе
	load() - загрузка из базы
	change_room() - смена комнаты
	generate_level() - создание уровня
	get(coords, diff=(0, 0)) - получить то, что находится по координатам
	player_move(button) - движение игрока
	enemies_move() - движение врагов
	show() - показать лабиринт
	button_down(mouse_pos) - отслеживание нажатия мыши
	key_down(button) - отслеживание нажатия клавиши

7. objects.py - все объекты на экране
class Object:
	это абстрактный класс объекта на игровом поле
	__init__(path, position, name) - путь к папке со спрайтами, позиция, имя объекта
	show(surf) - отобразить на поверхности

	class Wall(Object) - стена
	
	class Empty(Object) - пустая клетка
	
	class Teleport(Object) - клетка между комнатами (вход/выход)
	
	class Box(Object) - коробка
	move(new_position, direction) - сдвинуть коробку в new_position, direction нужно чтобы поставить правильную анимацию
		
	class Chest(Object)
	touch() - функция "трогания" сундука:
	1ое касание - появление ключа, 
	2ое касание - исчезновение ключа,
	последущие касания - вернет '__empty__' и Player.interaction_chest запустит простое движение в клетку
	
	class Potion(Object) - зелье в сундуках
	
	class Door(Object) - двери в переходах между комнатами (открываются при наличии ключа нужного цвета)
	touch() - попытка открыть дверь 
	
	class Key(Object)
	__init__(position, color) - позиция, цвет ключа

8. config.py
Все глобальные константы (цвета, координаты и тд)

9. functions.py
Функции, которые используются во всем коде 
	apply - сдвигает координты на PANEL_HEIGHT вниз по Y
	load_image - загружает изображение с прозрачным фоном


База dungeonBase.db
таблицы: users, rooms, entities, objects, inventary, types_of_objects